// Generated by CoffeeScript 1.8.0

/*
  backbone-mongo.js 0.6.7
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-mongo
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var BackboneMongo, CONNECTION_QUERIES, Connection, ConnectionPool, DatabaseURL, MongoClient, Queue, _, _ref;

  MongoClient = require('mongodb').MongoClient;

  _ref = require('backbone-orm'), _ = _ref._, Queue = _ref.Queue, DatabaseURL = _ref.DatabaseURL, ConnectionPool = _ref.ConnectionPool;

  BackboneMongo = require('../core');

  CONNECTION_QUERIES = require('./connection_queries');

  module.exports = Connection = (function() {
    function Connection(url, schema, options) {
      var database_url, key, value, _i, _len, _ref1;
      this.url = url;
      this.schema = schema != null ? schema : {};
      if (options == null) {
        options = {};
      }
      if (!_.isString(this.url)) {
        throw new Error('Expecting a string url');
      }
      this.connection_options = _.extend({}, BackboneMongo.connection_options, options);
      this.collection_requests = [];
      this.db = null;
      database_url = new DatabaseURL(this.url, true);
      this.collection_name = database_url.table;
      database_url.query || (database_url.query = {});
      delete database_url.search;
      _ref1 = database_url.query;
      for (key in _ref1) {
        value = _ref1[key];
        this.connection_options[key] = value;
      }
      database_url.query = {};
      for (_i = 0, _len = CONNECTION_QUERIES.length; _i < _len; _i++) {
        key = CONNECTION_QUERIES[_i];
        if (this.connection_options.hasOwnProperty(key)) {
          database_url.query[key] = this.connection_options[key];
          delete this.connection_options[key];
        }
      }
      this.url = database_url.format({
        exclude_table: true
      });
      this._connect();
    }

    Connection.prototype.destroy = function() {
      var collection_requests, request, _i, _len;
      if (!this.db) {
        return;
      }
      collection_requests = _.clone(this.collection_requests);
      this.collection_requests = [];
      for (_i = 0, _len = collection_requests.length; _i < _len; _i++) {
        request = collection_requests[_i];
        request(new Error('Client closed'));
      }
      this._collection = null;
      this.db.close();
      return this.db = null;
    };

    Connection.prototype.collection = function(callback) {
      if (this._collection) {
        return callback(null, this._collection);
      }
      this.collection_requests.push(callback);
      if (this.connection_error) {
        this.connection_error = null;
        return this._connect();
      }
    };

    Connection.prototype._connect = function() {
      var queue;
      queue = new Queue(1);
      queue.defer((function(_this) {
        return function(callback) {
          if ((_this.db = ConnectionPool.get(_this.url))) {
            return callback();
          }
          return MongoClient.connect(_this.url, _this.connection_options, function(err, db) {
            if (err) {
              return callback(err);
            }
            if ((_this.db = ConnectionPool.get(_this.url))) {
              db.close();
            } else {
              ConnectionPool.set(_this.url, _this.db = db);
            }
            return callback();
          });
        };
      })(this));
      queue.defer((function(_this) {
        return function(callback) {
          return _this.db.collection(_this.collection_name, function(err, collection) {
            if (!err) {
              _this._collection = collection;
            }
            return callback(err);
          });
        };
      })(this));
      return queue.await((function(_this) {
        return function(err) {
          var collection_requests, request, _i, _j, _len, _len1, _results, _results1;
          collection_requests = _this.collection_requests.splice(0, _this.collection_requests.length);
          if ((_this.connection_error = err)) {
            console.log("BackboneMongo: unable to create connection. Error:", err);
            _results = [];
            for (_i = 0, _len = collection_requests.length; _i < _len; _i++) {
              request = collection_requests[_i];
              _results.push(request(new Error("Connection failed. Error: " + (err.message || err))));
            }
            return _results;
          } else {
            _results1 = [];
            for (_j = 0, _len1 = collection_requests.length; _j < _len1; _j++) {
              request = collection_requests[_j];
              _results1.push(request(null, _this._collection));
            }
            return _results1;
          }
        };
      })(this));
    };

    return Connection;

  })();

}).call(this);
