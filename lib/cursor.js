// Generated by CoffeeScript 1.7.1

/*
  backbone-mongo.js 0.5.5
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-mongo
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var MemoryCursor, MongoCursor, Queue, util, _, _sortArgsToMongo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  _ = require('underscore');

  Queue = require('backbone-orm/lib/queue');

  MemoryCursor = require('backbone-orm/lib/memory/cursor');

  _sortArgsToMongo = function(args, backbone_adapter) {
    var key, sort_part, sorters, value, _i, _len;
    args = _.isArray(args) ? args : [args];
    sorters = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      sort_part = args[_i];
      key = sort_part.trim();
      value = 1;
      if (key[0] === '-') {
        key = key.substring(1).trim();
        value = -1;
      }
      sorters[key === 'id' ? backbone_adapter.id_attribute : key] = value;
    }
    return sorters;
  };

  module.exports = MongoCursor = (function(_super) {
    __extends(MongoCursor, _super);

    function MongoCursor() {
      return MongoCursor.__super__.constructor.apply(this, arguments);
    }

    MongoCursor.prototype.queryToJSON = function(callback) {
      var exists;
      if (this.hasCursorQuery('$zero')) {
        return callback(null, this.hasCursorQuery('$one') ? null : []);
      }
      exists = this.hasCursorQuery('$exists');
      return this.buildFindQuery((function(_this) {
        return function(err, find_query) {
          var $fields, args, id, id_target, key, value;
          if (err) {
            return callback(err);
          }
          args = [find_query];
          if (id = args[0].id) {
            delete args[0].id;
            if (_.isObject(id)) {
              id_target = args[0][_this.backbone_adapter.id_attribute] = {};
              for (key in id) {
                value = id[key];
                id_target[key] = _.isArray(value) ? _.map(value, _this.backbone_adapter.findId) : _this.backbone_adapter.findId(value);
              }
            } else {
              args[0][_this.backbone_adapter.id_attribute] = _this.backbone_adapter.findId(id);
            }
          }
          if (_this._cursor.$ids) {
            args[0][_this.backbone_adapter.id_attribute] = {
              $in: _.map(_this._cursor.$ids, _this.backbone_adapter.findId)
            };
          }
          if (_this._cursor.$values) {
            $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$values, _this._cursor.$white_list) : _this._cursor.$values;
          } else if (_this._cursor.$select) {
            $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$select, _this._cursor.$white_list) : _this._cursor.$select;
          } else if (_this._cursor.$white_list) {
            $fields = _this._cursor.$white_list;
          }
          if ($fields) {
            args.push($fields);
          }
          args.push(function(err, cursor) {
            if (err) {
              return callback(err);
            }
            if (_this._cursor.$sort) {
              if (!_.isArray(_this._cursor.$sort)) {
                _this._cursor.$sort = [_this._cursor.$sort];
              }
              cursor = cursor.sort(_sortArgsToMongo(_this._cursor.$sort, _this.backbone_adapter));
            }
            if (_this._cursor.$offset) {
              cursor = cursor.skip(_this._cursor.$offset);
            }
            if (_this._cursor.$one || exists) {
              cursor = cursor.limit(1);
            } else if (_this._cursor.$limit) {
              cursor = cursor.limit(_this._cursor.$limit);
            }
            if (_this.hasCursorQuery('$count')) {
              return cursor.count(callback);
            }
            if (exists) {
              return cursor.count(function(err, count) {
                return callback(err, !!count);
              });
            }
            return cursor.toArray(function(err, docs) {
              var json;
              if (err) {
                return callback(err);
              }
              json = _.map(docs, function(doc) {
                return _this.backbone_adapter.nativeToAttributes(doc);
              });
              return _this.fetchIncludes(json, function(err) {
                if (err) {
                  return callback(err);
                }
                if (_this.hasCursorQuery('$page')) {
                  return cursor.count(function(err, count) {
                    if (err) {
                      return callback(err);
                    }
                    return callback(null, {
                      offset: _this._cursor.$offset || 0,
                      total_rows: count,
                      rows: _this.selectResults(json)
                    });
                  });
                } else {
                  return callback(null, _this.selectResults(json));
                }
              });
            });
          });
          return _this.connection.collection(function(err, collection) {
            if (err) {
              return callback(err);
            }
            return collection.find.apply(collection, args);
          });
        };
      })(this));
    };

    return MongoCursor;

  })(MemoryCursor);

}).call(this);
