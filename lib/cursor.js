// Generated by CoffeeScript 1.6.3
/*
  backbone-mongo.js 0.5.0
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-mongo
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
*/


(function() {
  var MemoryCursor, MongoCursor, Queue, util, _, _ref, _sortArgsToMongo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  _ = require('underscore');

  Queue = require('backbone-orm/lib/queue');

  MemoryCursor = require('backbone-orm/lib/memory/cursor');

  _sortArgsToMongo = function(args) {
    var key, sort_part, sorters, _i, _len;
    args = _.isArray(args) ? args : [args];
    sorters = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      sort_part = args[_i];
      sort_part = sort_part.trim();
      if (sort_part[0] === '-') {
        key = sort_part.substring(1).trim();
        sorters[key] = -1;
      } else {
        sorters[sort_part] = 1;
      }
    }
    return sorters;
  };

  module.exports = MongoCursor = (function(_super) {
    __extends(MongoCursor, _super);

    function MongoCursor() {
      _ref = MongoCursor.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MongoCursor.prototype.queryToJSON = function(callback) {
      var exists,
        _this = this;
      if (this.hasCursorQuery('$zero')) {
        return callback(null, this.hasCursorQuery('$one') ? null : []);
      }
      exists = this.hasCursorQuery('$exists');
      return this.buildFindQuery(function(err, find_query) {
        var $fields, args, id;
        if (err) {
          return callback(err);
        }
        args = [find_query];
        if (id = args[0].id) {
          delete args[0].id;
          if (id.$in) {
            args[0][_this.backbone_adapter.id_attribute] = {
              $in: _.map(id.$in, _this.backbone_adapter.findId)
            };
          } else if (id.$ne) {
            args[0][_this.backbone_adapter.id_attribute] = {
              $ne: _this.backbone_adapter.findId(id.$ne)
            };
          } else {
            args[0][_this.backbone_adapter.id_attribute] = _this.backbone_adapter.findId(id);
          }
        }
        if (_this._cursor.$ids) {
          args[0][_this.backbone_adapter.id_attribute] = {
            $in: _.map(_this._cursor.$ids, _this.backbone_adapter.findId)
          };
        }
        if (_this._cursor.$values) {
          $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$values, _this._cursor.$white_list) : _this._cursor.$values;
        } else if (_this._cursor.$select) {
          $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$select, _this._cursor.$white_list) : _this._cursor.$select;
        } else if (_this._cursor.$white_list) {
          $fields = _this._cursor.$white_list;
        }
        if ($fields) {
          args.push($fields);
        }
        args.push(function(err, cursor) {
          if (err) {
            return callback(err);
          }
          if (_this._cursor.$sort) {
            if (!_.isArray(_this._cursor.$sort)) {
              _this._cursor.$sort = [_this._cursor.$sort];
            }
            cursor = cursor.sort(_sortArgsToMongo(_this._cursor.$sort));
          }
          if (_this._cursor.$offset) {
            cursor = cursor.skip(_this._cursor.$offset);
          }
          if (_this._cursor.$one || exists) {
            cursor = cursor.limit(1);
          } else if (_this._cursor.$limit) {
            cursor = cursor.limit(_this._cursor.$limit);
          }
          if (_this.hasCursorQuery('$count')) {
            return cursor.count(callback);
          }
          if (exists) {
            return cursor.count(function(err, count) {
              return callback(err, !!count);
            });
          }
          return cursor.toArray(function(err, docs) {
            var json;
            if (err) {
              return callback(err);
            }
            json = _.map(docs, function(doc) {
              return _this.backbone_adapter.nativeToAttributes(doc);
            });
            return _this.fetchIncludes(json, function(err) {
              if (err) {
                return callback(err);
              }
              if (_this._cursor.$one) {
                return callback(null, json.length ? json[0] : null);
              }
              json = _this.selectResults(json);
              if (_this.hasCursorQuery('$page')) {
                return cursor.count(function(err, count) {
                  if (err) {
                    return callback(err);
                  }
                  return callback(null, {
                    offset: _this._cursor.$offset || 0,
                    total_rows: count,
                    rows: json
                  });
                });
              } else {
                return callback(null, json);
              }
            });
          });
        });
        return _this.connection.collection(function(err, collection) {
          if (err) {
            return callback(err);
          }
          return collection.find.apply(collection, args);
        });
      });
    };

    return MongoCursor;

  })(MemoryCursor);

}).call(this);
